{"version":3,"file":"optPageHello.js","mappingssources":["webpack://chrome-extension-ts-webpack/./src/page/optPageHello.ts"],"sourcesContent":["\"use strict\";\n// src/page/optPageHello.ts\nconsole.log('options page loaded');\nconst form = document.getElementById('add-edit-form');\nconst idInput = document.getElementById('bookmark-id');\nconst nameInput = document.getElementById('bookmark-name');\nconst urlInput = document.getElementById('bookmark-url');\nconst container = document.getElementById('bookmarks-container');\nconst saveButton = document.getElementById('save-button');\nconst formError = document.getElementById('form-error');\nconst opStatus = document.getElementById('op-status');\nfunction setStatus(msg, timeout = 2000) {\n    if (!opStatus)\n        return;\n    opStatus.textContent = msg;\n    if (timeout > 0) {\n        setTimeout(() => { if (opStatus)\n            opStatus.textContent = ''; }, timeout);\n    }\n}\nfunction validateForm() {\n    if (!nameInput || !urlInput)\n        return false;\n    const name = nameInput.value.trim();\n    const url = urlInput.value.trim();\n    if (!name) {\n        if (formError)\n            formError.textContent = 'Name is required.';\n        if (saveButton)\n            saveButton.disabled = true;\n        return false;\n    }\n    try {\n        const parsed = new URL(url);\n        if (!/^https?:/.test(parsed.protocol))\n            throw new Error('protocol');\n    }\n    catch (_a) {\n        if (formError)\n            formError.textContent = 'Please enter a valid http(s) URL.';\n        if (saveButton)\n            saveButton.disabled = true;\n        return false;\n    }\n    if (formError)\n        formError.textContent = '';\n    if (saveButton)\n        saveButton.disabled = false;\n    return true;\n}\nfunction renderBookmarks() {\n    if (!container)\n        return;\n    container.innerHTML = ''; // Clear previous content\n    chrome.storage.local.get('bookmarks', (result) => {\n        const stored = result.bookmarks;\n        const data = { version: 0, bookmarks: [] };\n        if (stored && Array.isArray(stored.items)) {\n            data.version = typeof stored.version === 'number' ? stored.version : 0;\n            data.bookmarks = stored.items.map((it) => {\n                // Normalize each item to Bookmark shape, ensure id exists\n                const id = it.id || crypto.randomUUID();\n                const name = it.name || it.title || '';\n                const url = it.url || it.href || '';\n                return { id, name, url };\n            });\n        }\n        if (data.bookmarks.length > 0) {\n            const ul = document.createElement('ul');\n            for (const bookmark of data.bookmarks) {\n                const li = document.createElement('li');\n                const text = document.createElement('span');\n                text.textContent = `${bookmark.name} - ${bookmark.url}`;\n                const editButton = document.createElement('button');\n                editButton.textContent = 'Edit';\n                editButton.dataset.id = bookmark.id;\n                editButton.addEventListener('click', handleEdit);\n                const deleteButton = document.createElement('button');\n                deleteButton.textContent = 'Delete';\n                deleteButton.dataset.id = bookmark.id;\n                deleteButton.addEventListener('click', handleDelete);\n                li.appendChild(text);\n                li.appendChild(editButton);\n                li.appendChild(deleteButton);\n                ul.appendChild(li);\n            }\n            container.appendChild(ul);\n        }\n        else {\n            container.textContent = 'No bookmarks found.';\n        }\n    });\n}\n/**\n * Handles the click event of the \"Edit\" button for a bookmark.\n *\n * This function retrieves the bookmark's ID from the button's dataset,\n * fetches the bookmark data from `chrome.storage.local`, and populates the\n * add/edit form with the bookmark's name and URL.\n *\n * @param event The MouseEvent triggered by clicking the \"Edit\" button.\n */\nfunction handleEdit(event) {\n    const target = event.target;\n    const id = target.dataset.id;\n    chrome.storage.local.get('bookmarks', (result) => {\n        const stored = result.bookmarks;\n        if (stored && Array.isArray(stored.items)) {\n            const bookmarkToEdit = stored.items.find(b => b.id === id);\n            if (bookmarkToEdit) {\n                idInput.value = bookmarkToEdit.id;\n                nameInput.value = bookmarkToEdit.name || bookmarkToEdit.title || '';\n                urlInput.value = bookmarkToEdit.url || bookmarkToEdit.href || '';\n                validateForm();\n            }\n        }\n    });\n}\nfunction handleDelete(event) {\n    const target = event.target;\n    const id = target.dataset.id;\n    // Confirm deletion\n    const ok = globalThis.confirm('Delete this bookmark?');\n    if (!ok)\n        return;\n    chrome.storage.local.get('bookmarks', (result) => {\n        const stored = result.bookmarks;\n        if (stored && Array.isArray(stored.items)) {\n            const remaining = stored.items.filter((it) => it.id !== id);\n            const updated = { version: Math.floor(Date.now()), items: remaining };\n            chrome.storage.local.set({ bookmarks: updated }, () => {\n                console.log('Bookmark deleted.');\n                setStatus('Deleted');\n                renderBookmarks();\n            });\n        }\n    });\n}\nform.addEventListener('submit', (event) => {\n    event.preventDefault();\n    if (!validateForm())\n        return;\n    const id = idInput.value;\n    const name = nameInput.value.trim();\n    const url = urlInput.value.trim();\n    chrome.storage.local.get('bookmarks', (result) => {\n        const stored = result.bookmarks;\n        let items = [];\n        if (stored && Array.isArray(stored.items)) {\n            items = stored.items.slice();\n        }\n        if (id) { // Editing existing bookmark\n            const idx = items.findIndex((it) => it.id === id);\n            if (idx > -1) {\n                items[idx] = Object.assign(Object.assign({}, items[idx]), { id, name, url });\n            }\n        }\n        else { // Adding new bookmark\n            const newId = crypto.randomUUID();\n            items.push({ id: newId, name, url });\n        }\n        const updated = { version: Math.floor(Date.now()), items };\n        chrome.storage.local.set({ bookmarks: updated }, () => {\n            console.log('Bookmarks saved.');\n            form.reset();\n            idInput.value = '';\n            setStatus('Saved');\n            renderBookmarks();\n        });\n    });\n});\n// live-validate inputs\nif (nameInput)\n    nameInput.addEventListener('input', () => validateForm());\nif (urlInput)\n    urlInput.addEventListener('input', () => validateForm());\n// disable save until valid initially\nif (saveButton)\n    saveButton.disabled = true;\ndocument.addEventListener('DOMContentLoaded', renderBookmarks);\n"],"names":[],"sourceRoot":""}