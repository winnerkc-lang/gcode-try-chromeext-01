{"version":3,"file":"optPageHello.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://chrome-extension-ts-webpack/./src/page/optPageHello.ts"],"sourcesContent":["\"use strict\";\n// src/page/optPageHello.ts\nconsole.log('options page loaded');\nconst form = document.getElementById('add-edit-form');\nconst idInput = document.getElementById('bookmark-id');\nconst nameInput = document.getElementById('bookmark-name');\nconst urlInput = document.getElementById('bookmark-url');\nconst container = document.getElementById('bookmarks-container');\nfunction renderBookmarks() {\n    if (!container)\n        return;\n    container.innerHTML = ''; // Clear previous content\n    chrome.storage.local.get('bookmarks', (result) => {\n        const bookmarksData = result.bookmarks;\n        if (bookmarksData && bookmarksData.bookmarks && bookmarksData.bookmarks.length > 0) {\n            const ul = document.createElement('ul');\n            bookmarksData.bookmarks.forEach((bookmark) => {\n                const li = document.createElement('li');\n                const text = document.createElement('span');\n                text.textContent = `${bookmark.name} - ${bookmark.url}`;\n                const editButton = document.createElement('button');\n                editButton.textContent = 'Edit';\n                editButton.dataset.id = bookmark.id.toString();\n                editButton.addEventListener('click', handleEdit);\n                const deleteButton = document.createElement('button');\n                deleteButton.textContent = 'Delete';\n                deleteButton.dataset.id = bookmark.id.toString();\n                deleteButton.addEventListener('click', handleDelete);\n                li.appendChild(text);\n                li.appendChild(editButton);\n                li.appendChild(deleteButton);\n                ul.appendChild(li);\n            });\n            container.appendChild(ul);\n        }\n        else {\n            container.textContent = 'No bookmarks found.';\n        }\n    });\n}\nfunction handleEdit(event) {\n    const target = event.target;\n    const id = Number(target.dataset.id);\n    chrome.storage.local.get('bookmarks', (result) => {\n        const bookmarksData = result.bookmarks;\n        if (bookmarksData && bookmarksData.bookmarks) {\n            const bookmarkToEdit = bookmarksData.bookmarks.find(b => b.id === id);\n            if (bookmarkToEdit) {\n                idInput.value = bookmarkToEdit.id.toString();\n                nameInput.value = bookmarkToEdit.name;\n                urlInput.value = bookmarkToEdit.url;\n            }\n        }\n    });\n}\nfunction handleDelete(event) {\n    const target = event.target;\n    const id = Number(target.dataset.id);\n    chrome.storage.local.get('bookmarks', (result) => {\n        const bookmarksData = result.bookmarks;\n        if (bookmarksData && bookmarksData.bookmarks) {\n            bookmarksData.bookmarks = updatedBookmarks;\n            bookmarksData.version = new Date().getTime().toString(); // Update version\n            chrome.storage.local.set({ bookmarks: bookmarksData }, () => {\n                console.log('Bookmark deleted.');\n                renderBookmarks();\n            });\n        }\n    });\n}\nform.addEventListener('submit', (event) => {\n    event.preventDefault();\n    const id = Number(idInput.value);\n    const name = nameInput.value;\n    const url = urlInput.value;\n    chrome.storage.local.get('bookmarks', (result) => {\n        let bookmarksData = result.bookmarks || { version: '1.0', bookmarks: [] };\n        if (id) { // Editing existing bookmark\n            const bookmarkIndex = bookmarksData.bookmarks.findIndex(b => b.id === id);\n            if (bookmarkIndex > -1) {\n                bookmarksData.bookmarks[bookmarkIndex] = { id, name, url };\n            }\n        }\n        else { // Adding new bookmark\n            const newId = Date.now();\n            bookmarksData.bookmarks.push({ id: newId, name, url });\n        }\n        chrome.storage.local.set({ bookmarks: bookmarksData }, () => {\n            console.log('Bookmarks saved.');\n            form.reset();\n            idInput.value = '';\n            renderBookmarks();\n        });\n    });\n});\ndocument.addEventListener('DOMContentLoaded', renderBookmarks);\n"],"names":[],"sourceRoot":""}