description = "根據使用者需求，為當前功能產生一份自訂的檢查清單。"

prompt = """
---
description: 根據使用者需求，為當前功能產生一份自訂的檢查清單。
---

## 檢查清單的目的：「需求的單元測試」

**關鍵概念**：檢查清單是 **需求撰寫的單元測試** - 它們驗證在特定領域中需求的品質、清晰度和完整性。

**不用於驗證/測試**：
- ❌ 不是「驗證按鈕點擊是否正確」
- ❌ 不是「測試錯誤處理是否有效」
- ❌ 不是「確認 API 回應 200」
- ❌ 不是檢查程式碼/實作是否符合規格

**用於需求品質驗證**：
- ✅ 「是否為所有卡片類型定義了視覺層級需求？」 (完整性)
- ✅ 「『突顯顯示』是否用具體的尺寸/定位來量化？」 (清晰度)
- ✅ 「所有互動元素的懸停狀態需求是否一致？」 (一致性)
- ✅ 「是否為鍵盤導覽定義了無障礙需求？」 (覆蓋範圍)
- ✅ 「規格是否定義了當 logo 圖片載入失敗時會發生什麼？」 (邊界案例)

**比喻**：如果您的規格是用自然語言寫的程式碼，那麼檢查清單就是它的單元測試套件。您正在測試需求是否寫得好、完整、無歧義，並準備好進行實作 - 而不是測試實作是否有效。

## 使用者輸入

```text
$ARGUMENTS
```

在繼續之前，您 **必須** 考慮使用者輸入（如果不為空）。

## 執行步驟

1. **設定**：從儲存庫根目錄執行 `.specify/scripts/bash/check-prerequisites.sh --json` 並解析 JSON 以獲取 FEATURE_DIR 和 AVAILABLE_DOCS 列表。
   - 所有檔案路徑必須是絕對路徑。
   - 對於參數中的單引號，如 "I'm Groot"，請使用轉義語法：例如 'I'\''m Groot'（如果可能，或使用雙引號:"I'm Groot"）。

2. **澄清意圖（動態）**：推導出最多三個初步的上下文澄清問題（無預設目錄）。它們必須：
   - 從使用者的措辭 + 從規格/計畫/任務中提取的信號產生
   - 僅詢問會實質性改變檢查清單內容的資訊
   - 如果在 `$ARGUMENTS` 中已經明確，則單獨跳過
   - 優先考慮精確性而非廣度

   生成演算法：
   1. 提取信號：功能領域關鍵字（例如，認證、延遲、UX、API）、風險指標（「關鍵」、「必須」、「合規」）、利害關係人提示（「QA」、「審查」、「安全團隊」）以及明確的交付成果（「a11y」、「回滾」、「合約」）。
   2. 將信號聚類為候選焦點領域（最多 4 個），按相關性排序。
   3. 如果不明確，則識別可能的受眾和時機（作者、審查者、QA、發布）。
   4. 偵測缺失的維度：範疇廣度、深度/嚴謹性、風險重點、排除邊界、可衡量的驗收標準。
   5. 從這些原型中選擇並形成問題：
      - 範疇細化（例如，「這應該包括與 X 和 Y 的整合接觸點，還是僅限於本地模組的正確性？」）
      - 風險優先級（例如，「這些潛在風險領域中，哪些應該接受強制性的關卡檢查？」）
      - 深度校準（例如，「這是一個輕量級的提交前健全性檢查清單，還是一個正式的發布關卡？」）
      - 受眾框架（例如，「這將僅由作者使用，還是在 PR 審查期間由同事使用？」）
      - 邊界排除（例如，「我們這次是否應明確排除性能調優項目？」）
      - 場景類別差距（例如，「未偵測到恢復流程——回滾/部分失敗路徑是否在範疇內？」）

   問題格式規則：
   - 如果呈現選項，則產生一個緊湊的表格，欄位為：選項 | 候選方案 | 為何重要
   - 選項最多限制為 A–E；如果自由形式的答案更清晰，則省略表格
   - 絕不要求使用者重述他們已經說過的內容
   - 避免推測性類別（禁止虛構）。如果不確定，明確詢問：「請確認 X 是否屬於範疇內。」

   無法互動時的預設值：
   - 深度：標準
   - 受眾：如果與程式碼相關，則為審查者（PR）；否則為作者
   - 焦點：前 2 個相關性最高的聚類

   輸出問題（標記為 Q1/Q2/Q3）。回答後：如果 ≥2 個場景類別（替代/異常/恢復/非功能性領域）仍不清楚，您 **可以** 再問最多兩個更有針對性的後續問題（Q4/Q5），每個問題附上一行理由（例如，「未解決的恢復路徑風險」）。總問題數不超過五個。如果使用者明確拒絕更多問題，則跳過升級。

3. **理解使用者請求**：結合 `$ARGUMENTS` + 澄清問題的答案：
   - 推導檢查清單主題（例如，安全、審查、部署、UX）
   - 整合使用者提到的明確必須包含的項目
   - 將焦點選擇對應到類別框架
   - 從規格/計畫/任務中推斷任何缺失的上下文（**不要** 虛構）

4. **載入功能上下文**：從 FEATURE_DIR 讀取：
   - spec.md：功能需求和範疇
   - plan.md（如果存在）：技術細節、依賴項
   - tasks.md（如果存在）：實作任務
   
   **上下文載入策略**：
   - 僅載入與當前焦點領域相關的必要部分（避免傾倒整個檔案）
   - 優先將長段落總結為簡潔的場景/需求項目符號
   - 使用漸進式揭露：僅在偵測到差距時才進行後續檢索
   - 如果來源文件很大，則產生臨時的摘要項目，而不是嵌入原始文本

5. **產生檢查清單** - 建立「需求的單元測試」：
   - 如果 `FEATURE_DIR/checklists/` 目錄不存在，則建立它
   - 產生唯一的檢查清單檔名：
     - 使用基於領域的簡短、描述性名稱（例如，`ux.md`、`api.md`、`security.md`）
     - 格式：`[domain].md` 
     - 如果檔案已存在，則附加到現有檔案
   - 從 CHK001 開始順序編號項目
   - 每次 `/speckit.checklist` 執行都會建立一個 **新** 檔案（絕不覆寫現有的檢查清單）

   **核心原則 - 測試需求，而非實作**：
   每個檢查清單項目 **必須** 評估 **需求本身** 的：
   - **完整性**：是否所有必要的需求都已存在？
   - **清晰度**：需求是否無歧義且具體？
   - **一致性**：需求之間是否彼此對齊？
   - **可衡量性**：需求是否可以客觀地驗證？
   - **覆蓋範圍**：是否涵蓋了所有場景/邊界案例？
   
   **類別結構** - 按需求品質維度分組項目：
   - **需求完整性**（是否記錄了所有必要的需求？)
   - **需求清晰度**（需求是否具體且無歧義？)
   - **需求一致性**（需求是否無衝突地對齊？)
   - **驗收標準品質**（成功標準是否可衡量？)
   - **場景覆蓋範圍**（是否涵蓋了所有流程/案例？)
   - **邊界案例覆蓋範圍**（是否定義了邊界條件？)
   - **非功能性需求**（性能、安全、無障礙等 - 是否已指定？)
   - **依賴項與假設**（它們是否被記錄和驗證？)
   - **模糊與衝突**（哪些需要澄清？)
   
   **如何撰寫檢查清單項目 - 「需求的單元測試」**：
   
   ❌ **錯誤**（測試實作）：
   - 「驗證登陸頁面顯示 3 個劇集卡片」
   - 「測試桌面版上的懸停狀態是否有效」
   - 「確認點擊 logo 會導航到首頁」
   
   ✅ **正確**（測試需求品質）：
   - 「是否明確指定了精選劇集的確切數量和佈局？」 [完整性]
   - 「『突顯顯示』是否用具體的尺寸/定位來量化？」 [清晰度]
   - 「所有互動元素的懸停狀態需求是否一致？」 [一致性]
   - 「是否為所有互動式 UI 定義了鍵盤導覽需求？」 [覆蓋範圍]
   - 「當 logo 圖片載入失敗時，是否指定了後備行為？」 [邊界案例]
   - 「是否為非同步劇集資料定義了載入狀態？」 [完整性]
   - 「規格是否定義了競爭性 UI 元素的視覺層級？」 [清晰度]
   
   **項目結構**：
   每個項目應遵循此模式：
   - 詢問有關需求品質的問題格式
   - 專注於規格/計畫中 **寫了什麼**（或沒寫什麼）
   - 在括號中包含品質維度 [完整性/清晰度/一致性等]
   - 在檢查現有需求時，參考規格章節 `[Spec §X.Y]`
   - 在檢查缺失需求時，使用 `[Gap]` 標記
   
   **按品質維度分類的範例**：
   
   完整性：
   - 「是否為所有 API 失敗模式定義了錯誤處理需求？ [Gap]」
   - 「是否為所有互動元素指定了無障礙需求？ [完整性]」
   - 「是否為響應式佈局定義了行動裝置斷點需求？ [Gap]」
   
   清晰度：
   - 「『快速載入』是否用具體的計時閾值量化？ [清晰度, Spec §NFR-2]」
   - 「『相關劇集』的選擇標準是否已明確定義？ [清晰度, Spec §FR-5]」
   - 「『突顯』是否用可衡量的視覺屬性定義？ [模糊, Spec §FR-4]」
   
   一致性：
   - 「所有頁面的導覽需求是否一致？ [一致性, Spec §FR-10]」
   - 「登陸頁和詳情頁之間的卡片組件需求是否一致？ [一致性]」
   
   覆蓋範圍：
   - 「是否為零狀態場景（無劇集）定義了需求？ [覆蓋範圍, 邊界案例]」
   - 「是否處理了並行使用者互動場景？ [覆蓋範圍, Gap]」
   - 「是否為部分資料載入失敗指定了需求？ [覆蓋範圍, 異常流程]」
   
   可衡量性：
   - 「視覺層級需求是否可衡量/可測試？ [驗收標準, Spec §FR-1]」
   - 「『平衡的視覺權重』是否可以客觀驗證？ [可衡量性, Spec §FR-2]」

   **場景分類與覆蓋**（需求品質焦點）：
   - 檢查是否存在以下場景的需求：主要、替代、異常/錯誤、恢復、非功能性
   - 對於每個場景類別，問：「[場景類型] 需求是否完整、清晰且一致？」
   - 如果場景類別缺失：「[場景類型] 需求是故意排除還是缺失？ [Gap]」
   - 當發生狀態突變時，包括彈性/回滾：「是否為遷移失敗定義了回滾需求？ [Gap]」

   **可追溯性需求**：
   - 最低要求：≥80% 的項目 **必須** 至少包含一個可追溯性參考
   - 每個項目應參考：規格章節 `[Spec §X.Y]`，或使用標記：`[Gap]`、`[Ambiguity]`、`[Conflict]`、`[Assumption]`
   - 如果不存在 ID 系統：「是否建立了需求和驗收標準的 ID 方案？ [可追溯性]」

   **浮現與解決問題**（需求品質問題）：
   提出關於需求本身的問題：
   - 模糊處：「術語『快速』是否用具體指標量化？ [模糊, Spec §NFR-1]」
   - 衝突處：「§FR-10 和 §FR-10a 之間的導覽需求是否衝突？ [衝突]」
   - 假設：「『播客 API 始終可用』的假設是否已驗證？ [假設]」
   - 依賴項：「是否記錄了外部播客 API 的需求？ [依賴, Gap]」
   - 缺失定義：「『視覺層級』是否用可衡量的標準定義？ [Gap]」

   **內容整合**：
   - 軟上限：如果原始候選項目 > 40，則按風險/影響進行優先級排序
   - 合併檢查同一需求方面的幾乎重複的項目
   - 如果 >5 個低影響的邊界案例，則建立一個項目：「需求中是否處理了邊界案例 X、Y、Z？ [覆蓋範圍]」

   **🚫 絕對禁止** - 這些會使其成為實作測試，而非需求測試：
   - ❌ 任何以「驗證」、「測試」、「確認」、「檢查」+ 實作行為開頭的項目
   - ❌ 引用程式碼執行、使用者操作、系統行為
   - ❌ 「正確顯示」、「正常運作」、「功能符合預期」
   - ❌ 「點擊」、「導覽」、「渲染」、「載入」、「執行」
   - ❌ 測試案例、測試計畫、QA 程序
   - ❌ 實作細節（框架、API、演算法）
   
   **✅ 必要模式** - 這些測試需求品質：
   - ✅ 「是否為 [場景] 定義/指定/記錄了 [需求類型]？」
   - ✅ 「[模糊術語] 是否用具體標準量化/澄清？」
   - ✅ 「[A 部分] 和 [B 部分] 之間的需求是否一致？」
   - ✅ 「[需求] 是否可以客觀地衡量/驗證？」
   - ✅ 「需求中是否處理了 [邊界案例/場景]？」
   - ✅ 「規格是否定義了 [缺失的方面]？」

6. **結構參考**：遵循 `.specify/templates/checklist-template.md` 中的規範範本來產生檢查清單，以獲取標題、元資料部分、類別標題和 ID 格式。如果範本不可用，則使用：H1 標題、目的/建立的元資料行、包含 `- [ ] CHK### <需求項目>` 行的 `##` 類別部分，ID 從 CHK001 開始全域遞增。

7. **報告**：輸出所建立檢查清單的完整路徑、項目計數，並提醒使用者每次執行都會建立一個新檔案。總結：
   - 選擇的焦點領域
   - 深度級別
   - 執行者/時機
   - 任何明確由使用者指定的必須包含的項目

**重要提示**：除非檔案已存在，否則每次 `/speckit.checklist` 命令調用都會使用簡短、描述性的名稱建立一個檢查清單檔案。這允許：

- 不同類型的多個檢查清單（例如，`ux.md`、`test.md`、`security.md`）
- 簡單、易記的檔名，指示檢查清單的用途
- 在 `checklists/` 資料夾中易於識別和導覽

為避免混亂，請使用描述性類型，並在完成後清理過時的檢查清單。

## 範例檢查清單類型與範例項目

**UX 需求品質：** `ux.md`

範例項目（測試需求，而非實作）：
- 「是否用可衡量的標準定義了視覺層級需求？ [清晰度, Spec §FR-1]」
- 「是否明確指定了 UI 元素的數量和定位？ [完整性, Spec §FR-1]」
- 「互動狀態需求（懸停、焦點、活動）是否一致定義？ [一致性]」
- 「是否為所有互動元素指定了無障礙需求？ [覆蓋範圍, Gap]」
- 「當圖片載入失敗時，是否定義了後備行為？ [邊界案例, Gap]」
- 「『突顯顯示』是否可以客觀地衡量？ [可衡量性, Spec §FR-4]」

**API 需求品質：** `api.md`

範例項目：
- 「是否為所有失敗場景指定了錯誤回應格式？ [完整性]」
- 「速率限制需求是否用具體閾值量化？ [清晰度]」
- 「所有端點的認證需求是否一致？ [一致性]」
- 「是否為外部依賴項定義了重試/超時需求？ [覆蓋範圍, Gap]」
- 「需求中是否記錄了版本控制策略？ [Gap]」

**性能需求品質：** `performance.md`

範例項目：
- 「性能需求是否用具體指標量化？ [清晰度]」
- 「是否為所有關鍵使用者旅程定義了性能目標？ [覆蓋範圍]」
- 「是否指定了不同負載條件下的性能需求？ [完整性]」
- 「性能需求是否可以客觀地衡量？ [可衡量性]」
- 「是否為高負載場景定義了降級需求？ [邊界案例, Gap]」

**安全需求品質：** `security.md`

範例項目：
- 「是否為所有受保護的資源指定了認證需求？ [覆蓋範圍]」
- 「是否為敏感資訊定義了資料保護需求？ [完整性]」
- 「威脅模型是否已記錄，且需求與之對齊？ [可追溯性]」
- 「安全需求是否與合規義務一致？ [一致性]」
- 「是否定義了安全失敗/漏洞應對需求？ [Gap, 異常流程]」

## 反面範例：不該做什麼

**❌ 錯誤 - 這些測試實作，而非需求：**

```markdown
- [ ] CHK001 - 驗證登陸頁面顯示 3 個劇集卡片 [Spec §FR-001]
- [ ] CHK002 - 測試桌面版上的懸停狀態是否正常運作 [Spec §FR-003]
- [ ] CHK003 - 確認點擊 logo 會導航到首頁 [Spec §FR-010]
- [ ] CHK004 - 檢查相關劇集部分顯示 3-5 個項目 [Spec §FR-005]
```

**✅ 正確 - 這些測試需求品質：**

```markdown
- [ ] CHK001 - 是否明確指定了精選劇集的數量和佈局？ [完整性, Spec §FR-001]
- [ ] CHK002 - 所有互動元素的懸停狀態需求是否一致定義？ [一致性, Spec §FR-003]
- [ ] CHK003 - 所有可點擊品牌元素的導覽需求是否清晰？ [清晰度, Spec §FR-010]
- [ ] CHK004 - 相關劇集的選擇標準是否已記錄？ [Gap, Spec §FR-005]
- [ ] CHK005 - 是否為非同步劇集資料定義了載入狀態需求？ [Gap]
- [ ] CHK006 - 「視覺層級」需求是否可以客觀地衡量？ [可衡量性, Spec §FR-001]
```

**主要區別：**
- 錯誤：測試系統是否正常運作
- 正確：測試需求是否寫得正確
- 錯誤：驗證行為
- 正確：驗證需求品質
- 錯誤：「它是否做 X？」
- 正確：「X 是否被清晰地指定？」
"