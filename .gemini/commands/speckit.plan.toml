description = "使用計畫範本執行實作規劃工作流程，以產生設計產物。"

prompt = """
---
description: 使用計畫範本執行實作規劃工作流程，以產生設計產物。
---

## 使用者輸入

```text
$ARGUMENTS
```

在繼續之前，您 **必須** 考慮使用者輸入（如果不為空）。

## 綱要

1. **設定**：從儲存庫根目錄執行 `.specify/scripts/bash/setup-plan.sh --json` 並解析 JSON 以獲取 FEATURE_SPEC、IMPL_PLAN、SPECS_DIR、BRANCH。對於參數中的單引號，如 "I'm Groot"，請使用轉義語法：例如 'I'\''m Groot'（如果可能，或使用雙引號："I'm Groot"）。

2. **載入上下文**：讀取 FEATURE_SPEC 和 `.specify/memory/constitution.md`。載入 IMPL_PLAN 範本（已複製）。

3. **執行計畫工作流程**：遵循 IMPL_PLAN 範本中的結構來：
   - 填寫「技術上下文」（將未知項標記為「需要澄清」）
   - 從憲章中填寫「憲章檢查」部分
   - 評估關卡（如果違規行為不合理，則報錯）
   - 階段 0：產生 research.md（解決所有「需要澄清」的項目）
   - 階段 1：產生 data-model.md、contracts/、quickstart.md
   - 階段 1：執行代理腳本以更新代理上下文
   - 設計後重新評估「憲章檢查」

4. **停止並報告**：命令在階段 2 規劃後結束。報告分支、IMPL_PLAN 路徑和已產生的產物。

## 階段

### 階段 0：大綱與研究

1. **從上方的「技術上下文」中提取未知項**：
   - 對於每個「需要澄清」→ 建立一個研究任務
   - 對於每個依賴項 → 建立一個最佳實踐任務
   - 對於每個整合點 → 建立一個模式任務

2. **產生並派遣研究代理**：
   ```
   對於「技術上下文」中的每個未知項：
     任務：「為 {功能上下文} 研究 {未知項}」
   對於每個技術選擇：
     任務：「尋找在 {領域} 中使用 {技術} 的最佳實踐」
   ```

3. **在 `research.md` 中整合研究結果**，使用以下格式：
   - 決策：[選擇了什麼]
   - 理由：[為何選擇]
   - 考慮過的替代方案：[評估過的其他方案]

**輸出**：research.md，其中所有「需要澄清」的項目都已解決

### 階段 1：設計與合約

**先決條件**：`research.md` 已完成

1. **從功能規格中提取實體** → `data-model.md`：
   - 實體名稱、欄位、關係
   - 來自需求的驗證規則
   - 狀態轉換（如果適用）

2. **從功能性需求中產生 API 合約**：
   - 對於每個使用者操作 → 一個端點
   - 使用標準的 REST/GraphQL 模式
   - 將 OpenAPI/GraphQL 結構輸出到 `/contracts/`

3. **代理上下文更新**：
   - 執行 `.specify/scripts/bash/update-agent-context.sh gemini`
   - 這些腳本會偵測正在使用的 AI 代理
   - 更新相應的特定於代理的上下文檔案
   - 僅從當前計畫中新增新技術
   - 保留標記之間的手動新增內容

**輸出**：data-model.md、/contracts/*、quickstart.md、特定於代理的檔案

## 關鍵規則

- 使用絕對路徑
- 在關卡失敗或未解決的澄清項上報錯（ERROR）
""";