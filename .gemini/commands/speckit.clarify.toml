description = "透過提出最多 5 個高度針對性的澄清問題，識別當前功能規格中未詳細說明的區域，並將答案編碼回規格中。"

prompt = """
---
description: 透過提出最多 5 個高度針對性的澄清問題，識別當前功能規格中未詳細說明的區域，並將答案編碼回規格中。
---

## 使用者輸入

```text
$ARGUMENTS
```

在繼續之前，您 **必須** 考慮使用者輸入（如果不為空）。

## 綱要

目標：偵測並減少當前功能規格中的模糊或缺失的決策點，並將澄清內容直接記錄在規格檔案中。

注意：此澄清工作流程預計在調用 `/speckit.plan` **之前** 執行（並完成）。如果使用者明確表示他們要跳過澄清（例如，探索性的原型開發），您可以繼續，但必須警告下游的重工風險會增加。

執行步驟：

1. 從儲存庫根目錄 **一次性** 執行 `.specify/scripts/bash/check-prerequisites.sh --json --paths-only`（組合的 `--json --paths-only` 模式 / `-Json -PathsOnly`）。解析最小的 JSON 負載欄位：
   - `FEATURE_DIR`
   - `FEATURE_SPEC`
   - （可選地捕獲 `IMPL_PLAN`, `TASKS` 以供未來的鏈式流程使用。）
   - 如果 JSON 解析失敗，則中止並指示使用者重新執行 `/speckit.specify` 或驗證功能分支環境。
   - 對於參數中的單引號，如 "I'm Groot"，請使用轉義語法：例如 'I'\''m Groot'（如果可能，或使用雙引號："I'm Groot"）。

2. 載入當前的規格檔案。使用此分類法進行結構化的模糊性與覆蓋範圍掃描。對於每個類別，標記狀態：清晰 / 部分 / 缺失。產生一個用於優先級排序的內部覆蓋圖（除非不提問，否則不要輸出原始圖）。

   功能範疇與行為：
   - 核心使用者目標與成功標準
   - 明確的非範疇聲明
   - 使用者角色 / 人物誌的區分

   領域與資料模型：
   - 實體、屬性、關係
   - 身份與唯一性規則
   - 生命週期/狀態轉換
   - 資料量 / 規模假設

   互動與使用者體驗流程：
   - 關鍵使用者旅程 / 序列
   - 錯誤/空/載入狀態
   - 無障礙或本地化註記

   非功能性品質屬性：
   - 性能（延遲、吞吐量目標）
   - 可擴展性（水平/垂直、限制）
   - 可靠性與可用性（正常運行時間、恢復期望）
   - 可觀察性（日誌、指標、追蹤信號）
   - 安全與隱私（認證/授權、資料保護、威脅假設）
   - 合規性 / 法規限制（如果有）

   整合與外部依賴：
   - 外部服務/API 及其失敗模式
   - 資料導入/導出格式
   - 協議/版本控制假設

   邊界案例與失敗處理：
   - 負面場景
   - 速率限制 / 節流
   - 衝突解決（例如，並行編輯）

   限制與權衡：
   - 技術限制（語言、儲存、託管）
   - 明確的權衡或被拒絕的替代方案

   術語與一致性：
   - 規範的詞彙表術語
   - 避免的同義詞 / 已棄用的術語

   完成信號：
   - 驗收標準的可測試性
   - 可衡量的「完成定義」風格指標

   雜項 / 預留位置：
   - TODO 標記 / 未解決的決策
   - 缺乏量化的模糊形容詞（「穩健的」、「直觀的」）

   對於每個狀態為「部分」或「缺失」的類別，新增一個候選問題機會，除非：
   - 澄清不會實質性地改變實作或驗證策略
   - 資訊更適合推遲到計畫階段（內部註記）

3. （內部）產生一個優先級排序的候選澄清問題佇列（最多 5 個）。**不要** 一次性輸出所有問題。應用這些限制：
    - 整個會話中最多總共 10 個問題。
    - 每個問題必須能用以下任一方式回答：
       * 一個簡短的多選題（2-5 個不同且互斥的選項），或
       * 一個單詞 / 短語的答案（明確限制：「答案 ≤5 個詞」）。
   - 僅包括那些答案會實質性影響架構、資料模型、任務分解、測試設計、使用者體驗行為、營運準備或合規性驗證的問題。
   - 確保類別覆蓋的平衡：首先嘗試覆蓋影響最大的未解決類別；避免在一個高影響區域（例如，安全態勢）未解決時，問兩個低影響的問題。
   - 排除已回答的問題、無關緊要的風格偏好，或計畫層級的執行細節（除非阻礙正確性）。
   - 優先選擇能減少下游重工風險或防止驗收測試不一致的澄清。
   - 如果超過 5 個類別仍未解決，則根據（影響 * 不確定性）的啟發式方法選擇前 5 個。

4. 順序提問循環（互動式）：
    - 一次 **只** 提出一個問題。
    - 對於多選題：
       * **分析所有選項** 並根據以下因素決定 **最合適的選項**：
          - 專案類型的最佳實踐
          - 類似實作中的常見模式
          - 風險降低（安全性、性能、可維護性）
          - 與規格中可見的任何明確專案目標或限制的對齊
       * 將您的 **推薦選項** 突出顯示在頂部，並附上清晰的理由（1-2 句話解釋為何這是最佳選擇）。
       * 格式為：`**推薦：** 選項 [X] - <理由>`
       * 然後將所有選項渲染為 Markdown 表格：

       | 選項 | 描述 |
       |--------|-------------|
       | A | <選項 A 描述> |
       | B | <選項 B 描述> |
       | C | <選項 C 描述> | (視需要新增 D/E，最多 5 個)
       | 簡答 | 提供一個不同的簡短答案 (≤5 個詞) | (僅在自由形式的替代方案合適時包含)

       * 在表格後新增：`您可以回覆選項字母（例如，「A」），或說「是」或「推薦」來接受建議，或提供您自己的簡短答案。`
    - 對於簡答式（沒有有意義的離散選項）：
       * 根據最佳實踐和上下文提供您的 **建議答案**。
       * 格式為：`**建議：** <您提議的答案> - <簡要理由>`
       * 然後輸出：`格式：簡短答案 (≤5 個詞)。您可以說「是」或「建議」來接受建議，或提供您自己的答案。`
    - 在使用者回答後：
       * 如果使用者回覆「是」、「推薦」或「建議」，則使用您先前陳述的推薦/建議作為答案。
       * 否則，驗證答案是否對應到一個選項或符合 ≤5 個詞的限制。
       * 如果模糊，要求快速消除歧義（計數仍屬於同一個問題；不前進）。
       * 一旦滿意，將其記錄在工作記憶中（尚不寫入磁碟）並移至下一個佇列中的問題。
    - 在以下情況停止提問：
       * 所有關鍵模糊點都已提早解決（剩餘的佇列項目變得不必要），或
       * 使用者發出完成信號（「完成」、「好的」、「不用了」），或
       * 您已問滿 5 個問題。
    - 絕不提前透露未來佇列中的問題。
    - 如果一開始就沒有有效的問題，立即報告沒有關鍵的模糊點。

5. **每次** 接受答案後進行整合（增量更新方法）：
    - 維護規格的記憶體中表示（在開始時載入一次）以及原始檔案內容。
    - 對於此會話中第一個被整合的答案：
       * 確保存在一個 `## 澄清內容` 章節（如果缺失，則根據規格範本在最高層級的上下文/總覽章節之後建立它）。
       * 在其下，為今天建立（如果不存在）一個 `### 會話 YYYY-MM-DD` 的子標題。
    - 在接受後立即附加一個項目符號行：`- Q: <問題> → A: <最終答案>`。
    - 然後立即將澄清應用到最合適的章節：
       * 功能性模糊 → 更新或在「功能性需求」中新增一個項目符號。
       * 使用者互動 / 角色區分 → 更新「使用者故事」或「角色」子章節（如果存在），澄清角色、限制或場景。
       * 資料形狀 / 實體 → 更新「資料模型」（新增欄位、類型、關係），保持順序；簡潔地註記新增的限制。
       * 非功能性限制 → 在「非功能性 / 品質屬性」章節中新增/修改可衡量的標準（將模糊的形容詞轉換為指標或明確的目標）。
       * 邊界案例 / 負面流程 → 在「邊界案例 / 錯誤處理」下新增一個新的項目符號（如果範本為其提供了預留位置，則建立該子章節）。
       * 術語衝突 → 在整個規格中標準化術語；僅在必要時保留原始術語，並在第一次出現時加上 `（原稱為「X」）`。
    - 如果澄清使早期的模糊陳述失效，則替換該陳述而不是重複；不留下過時的矛盾文本。
    - **每次** 整合後儲存規格檔案，以最小化上下文丟失的風險（原子性覆寫）。
    - 保留格式：不要重新排序不相關的章節；保持標題層級完整。
    - 保持每個插入的澄清內容最小化且可測試（避免敘述性漂移）。

6. 驗證（**每次** 寫入後以及最終階段執行）：
    - 「澄清內容」會話中每個接受的答案恰好對應一個項目符號（無重複）。
    - 總提問（已接受）數 ≤ 5。
    - 更新後的章節不應包含新答案旨在解決的、揮之不去的模糊預留位置。
    - 不應保留任何早期的矛盾陳述（掃描以移除現已失效的替代選項）。
    - Markdown 結構有效；僅允許新增的標題：`## 澄清內容`、`### 會話 YYYY-MM-DD`。
    - 術語一致性：在所有更新的章節中使用相同的規範術語。

7. 將更新後的規格寫回 `FEATURE_SPEC`。

8. 報告完成（在提問循環結束或提早終止後）：
    - 提問與回答的數量。
    - 更新後規格的路徑。
    - 觸及的章節（列出名稱）。
    - 覆蓋範圍摘要表，列出每個分類類別及其狀態：已解決（原為部分/缺失並已處理）、已延後（超出問題配額或更適合在計畫階段處理）、清晰（已足夠）、待處理（仍為部分/缺失但影響低）。
    - 如果仍有任何「待處理」或「已延後」的項目，建議是繼續進行 `/speckit.plan` 還是在計畫後再次執行 `/speckit.clarify`。
    - 建議的下一個命令。

行為規則：
- 如果沒有發現有意義的模糊點（或所有潛在問題的影響都很低），則回應：「未偵測到值得正式澄清的關鍵模糊點。」並建議繼續。
- 如果規格檔案缺失，指示使用者先執行 `/speckit.specify`（不要在此處建立新規格）。
- 總提問數絕不超過 5 個（對單一問題的澄清重試不計為新問題）。
- 避免推測性的技術堆疊問題，除非其缺失會阻礙功能清晰度。
- 尊重使用者提早終止的信號（「停止」、「完成」、「繼續」）。
 - 如果因覆蓋完全而未提問，則輸出一個緊湊的覆蓋範圍摘要（所有類別均為「清晰」），然後建議前進。
 - 如果達到配額但仍有未解決的高影響類別，則在「已延後」下明確標記它們並附上理由。

用於優先級排序的上下文：{{args}}
"""