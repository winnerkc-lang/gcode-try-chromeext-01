description = "根據可用的設計產物，為功能產生一份可執行的、按依賴排序的 tasks.md。"

prompt = ""
---
description: 根據可用的設計產物，為功能產生一份可執行的、按依賴排序的 tasks.md。
---

## 使用者輸入

```text
$ARGUMENTS
```

在繼續之前，您 **必須** 考慮使用者輸入（如果不為空）。

## 綱要

1. **設定**：從儲存庫根目錄執行 `.specify/scripts/bash/check-prerequisites.sh --json` 並解析 FEATURE_DIR 和 AVAILABLE_DOCS 列表。所有路徑必須是絕對路徑。對於參數中的單引號，如 "I'm Groot"，請使用轉義語法：例如 'I'\''m Groot'（如果可能，或使用雙引號："I'm Groot"）。

2. **載入設計文件**：從 FEATURE_DIR 讀取：
   - **必要**：plan.md（技術堆疊、函式庫、結構）、spec.md（帶有優先級的使用者故事）
   - **可選**：data-model.md（實體）、contracts/（API 端點）、research.md（決策）、quickstart.md（測試場景）
   - 注意：並非所有專案都有所有文件。根據可用的文件產生任務。

3. **執行任務產生工作流程**：
   - 載入 plan.md 並提取技術堆疊、函式庫、專案結構
   - 載入 spec.md 並提取帶有優先級（P1, P2, P3 等）的使用者故事
   - 如果 data-model.md 存在：提取實體並對應到使用者故事
   - 如果 contracts/ 存在：將端點對應到使用者故事
   - 如果 research.md 存在：提取決策以用於設定任務
   - 按使用者故事組織任務（見下方的「任務產生規則」）
   - 產生顯示使用者故事完成順序的依賴圖
   - 為每個使用者故事建立並行執行的範例
   - 驗證任務完整性（每個使用者故事都有所有需要的任務，且可獨立測試）

4. **產生 tasks.md**：使用 `.specify/templates/tasks-template.md` 作為結構，填入：
   - 從 plan.md 獲取的正確功能名稱
   - 階段 1：設定任務（專案初始化）
   - 階段 2：基礎任務（所有使用者故事的阻塞性先決條件）
   - 階段 3+：每個使用者故事一個階段（按 spec.md 中的優先級順序）
   - 每個階段包括：故事目標、獨立測試標準、測試（如果要求）、實作任務
   - 最後階段：潤飾與橫切關注點
   - 所有任務必須遵循嚴格的檢查清單格式（見下方的「任務產生規則」）
   - 為每個任務提供清晰的檔案路徑
   - 「依賴項」部分顯示故事的完成順序
   - 每個故事的並行執行範例
   - 「實作策略」部分（MVP 優先，增量交付）

5. **報告**：輸出產生的 tasks.md 的路徑和摘要：
   - 總任務數
   - 每個使用者故事的任務數
   - 已識別的並行機會
   - 每個故事的獨立測試標準
   - 建議的 MVP 範疇（通常僅為使用者故事 1）
   - 格式驗證：確認 **所有** 任務都遵循檢查清單格式（核取方塊、ID、標籤、檔案路徑）

用於任務產生的上下文：{{args}}

tasks.md 應該是可立即執行的 - 每個任務都必須足夠具體，以便 LLM 無需額外上下文即可完成。

## 任務產生規則

**關鍵**：任務 **必須** 按使用者故事組織，以實現獨立的實作和測試。

**測試是可選的**：僅在功能規格中明確要求或使用者要求 TDD 方法時才產生測試任務。

### 檢查清單格式（必要）

每個任務 **必須** 嚴格遵循此格式：

```text
- [ ] [TaskID] [P?] [Story?] 帶有檔案路徑的描述
```

**格式組件**：

1. **核取方塊**：始終以 `- [ ]` 開頭（markdown 核取方塊）
2. **任務 ID**：按執行順序的序號（T001, T002, T003...）
3. **[P] 標記**：僅在任務可並行化時包含（不同檔案，不依賴未完成的任務）
4. **[Story] 標籤**：**僅** 對於使用者故事階段的任務為必要
   - 格式：[US1], [US2], [US3] 等（對應 spec.md 中的使用者故事）
   - 設定階段：無故事標籤
   - 基礎階段：無故事標籤
   - 使用者故事階段：**必須** 有故事標籤
   - 潤飾階段：無故事標籤
5. **描述**：清晰的動作及確切的檔案路徑

**範例**：

- ✅ 正確：`- [ ] T001 根據實作計畫建立專案結構`
- ✅ 正確：`- [ ] T005 [P] 在 src/middleware/auth.py 中實作認證中介軟體`
- ✅ 正確：`- [ ] T012 [P] [US1] 在 src/models/user.py 中建立 User 模型`
- ✅ 正確：`- [ ] T014 [US1] 在 src/services/user_service.py 中實作 UserService`
- ❌ 錯誤：`- [ ] 建立 User 模型`（缺少 ID 和故事標籤）
- ❌ 錯誤：`T001 [US1] 建立模型`（缺少核取方塊）
- ❌ 錯誤：`- [ ] [US1] 建立 User 模型`（缺少任務 ID）
- ❌ 錯誤：`- [ ] T001 [US1] 建立模型`（缺少檔案路徑）

### 任務組織

1. **從使用者故事（spec.md）** - 主要組織方式：
   - 每個使用者故事（P1, P2, P3...）都有自己的階段
   - 將所有相關組件對應到其故事：
     - 該故事所需的模型
     - 該故事所需的服務
     - 該故事所需的端點/UI
     - 如果要求測試：特定於該故事的測試
   - 標記故事依賴項（大多數故事應該是獨立的）
   
2. **從合約**：
   - 將每個合約/端點 → 對應到它所服務的使用者故事
   - 如果要求測試：每個合約 → 在該故事階段的實作前，建立一個合約測試任務 [P]
   
3. **從資料模型**：
   - 將每個實體對應到需要它的使用者故事
   - 如果實體服務於多個故事：將其放在最早的故事或設定階段
   - 關係 → 在適當的故事階段中，成為服務層的任務
   
4. **從設定/基礎設施**：
   - 共享的基礎設施 → 設定階段（階段 1）
   - 基礎/阻塞性任務 → 基礎階段（階段 2）
   - 特定於故事的設定 → 在該故事的階段內

### 階段結構

- **階段 1**：設定（專案初始化）
- **階段 2**：基礎（阻塞性先決條件 - **必須** 在使用者故事之前完成）
- **階段 3+**：按優先級順序的使用者故事（P1, P2, P3...）
  - 在每個故事內：測試（如果要求）→ 模型 → 服務 → 端點 → 整合
  - 每個階段都應該是一個完整的、可獨立測試的增量
- **最後階段**：潤飾與橫切關注點
"