description = "在任務產生後，對 spec.md、plan.md 和 tasks.md 進行一次非破壞性的跨產物一致性與品質分析。"

prompt = """
---
description: 在任務產生後，對 spec.md、plan.md 和 tasks.md 進行一次非破壞性的跨產物一致性與品質分析。
---

## 使用者輸入

```text
$ARGUMENTS
```

在繼續之前，您 **必須** 考慮使用者輸入（如果不為空）。

## 目標

在實作前，識別三個核心產物（`spec.md`、`plan.md`、`tasks.md`）中的不一致、重複、模糊和未詳細說明的部分。此命令 **必須** 僅在 `/tasks` 成功產生完整的 `tasks.md` 後執行。

## 操作限制

**嚴格唯讀**：**不要** 修改任何檔案。輸出一份結構化的分析報告。提供一個可選的修復計畫（使用者必須明確批准後，才能手動調用任何後續的編輯命令）。

**憲章的權威性**：專案憲章（`.specify/memory/constitution.md`）在此分析範疇內是 **不可協商的**。與憲章的衝突會自動被視為 **嚴重（CRITICAL）** 問題，並且需要調整規格、計畫或任務——而不是削弱、重新解釋或默默忽略原則。如果原則本身需要更改，那必須在 `/analyze` 之外，透過一次獨立、明確的憲章更新來完成。

## 執行步驟

### 1. 初始化分析上下文

從儲存庫根目錄執行一次 `.specify/scripts/bash/check-prerequisites.sh --json --require-tasks --include-tasks`，並解析其 JSON 輸出以獲取 FEATURE_DIR 和 AVAILABLE_DOCS。推導出絕對路徑：

- SPEC = FEATURE_DIR/spec.md
- PLAN = FEATURE_DIR/plan.md
- TASKS = FEATURE_DIR/tasks.md

如果任何必要檔案缺失，則中止並顯示錯誤訊息（指示使用者執行缺失的先決條件命令）。
對於參數中的單引號，如 "I'm Groot"，請使用轉義語法：例如 'I'\''m Groot'（如果可能，或使用雙引號："I'm Groot"）。

### 2. 載入產物（漸進式揭露）

僅從每個產物中載入最少的必要上下文：

**從 spec.md：**

- 總覽/上下文
- 功能性需求
- 非功能性需求
- 使用者故事
- 邊界案例（如果存在）

**從 plan.md：**

- 架構/技術堆疊選擇
- 資料模型參考
- 階段
- 技術限制

**從 tasks.md：**

- 任務 ID
- 描述
- 階段分組
- 並行標記 [P]
- 參考的檔案路徑

**從憲章：**

- 載入 `.specify/memory/constitution.md` 以進行原則驗證

### 3. 建立語意模型

建立內部表示（不要在輸出中包含原始產物）：

- **需求清單**：每個功能性 + 非功能性需求都有一個穩定的鍵（根據祈使句短語推導 slug；例如，「使用者可以上傳檔案」→ `user-can-upload-file`）
- **使用者故事/行動清單**：具有驗收標準的離散使用者行動
- **任務覆蓋對應**：將每個任務對應到一個或多個需求或故事（透過關鍵字/明確的參考模式如 ID 或關鍵短語進行推斷）
- **憲章規則集**：提取原則名稱和 MUST/SHOULD 的規範性陳述

### 4. 偵測階段（權杖高效分析）

專注於高信號的發現。總發現數限制為 50 個；將其餘部分匯總在溢出摘要中。

#### A. 重複偵測

- 識別幾乎重複的需求
- 標記品質較低的措辭以進行整合

#### B. 模糊偵測

- 標記缺乏可衡量標準的模糊形容詞（快速、可擴展、安全、直觀、穩健）
- 標記未解決的預留位置（TODO、TKTK、???、`<placeholder>` 等）

#### C. 未詳細說明

- 有動詞但缺少對象或可衡量結果的需求
- 缺少與驗收標準對齊的使用者故事
- 任務參考了未在規格/計畫中定義的檔案或組件

#### D. 憲章對齊

- 任何與 MUST 原則衝突的需求或計畫元素
- 缺少憲章中規定的強制性章節或品質關卡

#### E. 覆蓋差距

- 沒有關聯任務的需求
- 沒有對應需求/故事的任務
- 未在任務中反映的非功能性需求（例如，性能、安全）

#### F. 不一致

- 術語漂移（同一概念在不同檔案中名稱不同）
- 在計畫中參考但在規格中缺席的資料實體（或反之）
- 任務排序矛盾（例如，在基礎設定任務之前進行整合任務，且無依賴註記）
- 衝突的需求（例如，一個要求 Next.js，而另一個指定 Vue）

### 5. 嚴重性分配

使用此啟發式方法對發現進行優先級排序：

- **嚴重 (CRITICAL)**：違反憲章的 MUST 原則、缺少核心規格產物，或阻礙基準功能的零覆蓋需求
- **高 (HIGH)**：重複或衝突的需求、模糊的安全性/性能屬性、不可測試的驗收標準
- **中 (MEDIUM)**：術語漂移、缺少非功能性任務覆蓋、未詳細說明的邊界案例
- **低 (LOW)**：風格/措辭改進、不影響執行順序的輕微冗餘

### 6. 產生精簡的分析報告

輸出一份 Markdown 報告（無檔案寫入），結構如下：

## 規格分析報告

| ID | 類別 | 嚴重性 | 位置 | 摘要 | 建議 |
|----|----------|----------|-------------|---------|----------------|
| A1 | 重複 | 高 | spec.md:L120-134 | 兩個相似的需求... | 合併措辭；保留更清晰的版本 |

（每個發現增加一行；產生以類別首字母為前綴的穩定 ID。）

**覆蓋摘要表：**

| 需求鍵 | 是否有任務？ | 任務 ID | 備註 |
|-----------------|-----------|----------|-------|

**憲章對齊問題：**（如果有）

**未對應的任務：**（如果有）

**指標：**

- 總需求數
- 總任務數
- 覆蓋率 %（有 >=1 個任務的需求）
- 模糊計數
- 重複計數
- 嚴重問題計數

### 7. 提供後續行動

在報告末尾，輸出一份簡潔的「後續行動」區塊：

- 如果存在 **嚴重 (CRITICAL)** 問題：建議在執行 `/implement` 前解決
- 如果只有 **低/中 (LOW/MEDIUM)** 問題：使用者可以繼續，但提供改進建議
- 提供明確的命令建議：例如，「執行 /specify 進行細化」、「執行 /plan 調整架構」、「手動編輯 tasks.md 為 'performance-metrics' 新增覆蓋」

### 8. 提供修復建議

詢問使用者：「您希望我為前 N 個問題建議具體的修復編輯嗎？」（不要自動應用它們。）

## 操作原則

### 上下文效率

- **最少的高信號權杖**：專注於可操作的發現，而非詳盡的文件
- **漸進式揭露**：增量載入產物；不要將所有內容都傾倒到分析中
- **權杖高效的輸出**：將發現表格限制在 50 行；總結溢出部分
- **確定性結果**：在無變更的情況下重新執行應產生一致的 ID 和計數

### 分析指南

- **絕不修改檔案**（這是唯讀分析）
- **絕不虛構缺失的章節**（如果不存在，準確報告它們）
- **優先處理違反憲章的行為**（這些總是 **嚴重 (CRITICAL)** 的）
- **使用範例而非詳盡的規則**（引用具體實例，而非通用模式）
- **優雅地報告零問題**（發出帶有覆蓋率統計的成功報告）

## 上下文

{{args}}
"